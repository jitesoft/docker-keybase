include:
  - file: /Scan/trivy.yml
    project: jitesoft/gitlab-ci-lib

stages:
  - build
  - containerize
  - scan
  - notify

.build:alpine:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/go:latest
  before_script:
    - export CGO_ENABLED=1
    - export GO15VENDOREXPERIMENT=1
    - apk add --no-cache grep wget gcc curl libstdc++ build-base binutils-gold xz
    - mkdir binaries
    - mkdir out
    - VERSION=$(wget -qO- https://github.com/keybase/client/releases | grep -oP '(?<=releases\/tag\/)(.*?)(?=\">)' | awk 'NR==1{print $1}' | head -1)
    - echo ${VERSION} > binaries/version.txt
  script:
    - mkdir -p ${GOPATH}/src/github.com/keybase/client
    - curl -L https://github.com/keybase/client/releases/download/${VERSION}/keybase-${VERSION}.tar.xz -o /tmp/keybase.tar.xz
    - tar -Jxf /tmp/keybase.tar.xz -C "${GOPATH}/src/github.com/keybase/client" --strip-components=1
    - BUILDMODE="-buildmode=pie"
    - cd out
    - go build -v -a -ldflags "-linkmode external -extldflags '-static' -s -w" ${BUILDMODE} -tags production github.com/keybase/client/go/keybase
    - go build -v -a -ldflags "-linkmode external -extldflags '-static' -s -w" ${BUILDMODE} -tags production github.com/keybase/client/go/kbfs/redirector
    - go build -v -a -ldflags "-linkmode external -extldflags '-static' -s -w" ${BUILDMODE} -tags production github.com/keybase/client/go/kbfs/kbfsfuse
    - cd ${CI_PROJECT_DIR}
    - cp Alpine/entrypoint out/
    - $(cd out && tar -czf ${CI_PROJECT_DIR}/binaries/keybase-${ARCH}.tar.gz *)
  artifacts:
    paths:
      - binaries
    expire_in: 3 hours

build:alpine:amd:
  variables:
    ARCH: "amd64"
  extends: .build:alpine
  tags:
    - native-amd64

build:alpine:arm:
  variables:
    ARCH: "arm64"
  extends: .build:alpine
  tags:
    - native-aarch64

.build:ubuntu:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/go/ubuntu:latest
  before_script:
    - export CGO_ENABLED=1
    - export GO15VENDOREXPERIMENT=1
    - apt-get update
    - apt-get install -y curl tar xz-utils gcc wget
    - mkdir binaries
    - mkdir out
    - VERSION=$(wget -qO- https://github.com/keybase/client/releases | grep -oP '(?<=releases\/tag\/)(.*?)(?=\">)' | awk 'NR==1{print $1}' | head -1)
    - echo ${VERSION} > binaries/version.txt
  script:
    - mkdir -p ${GOPATH}/src/github.com/keybase/client
    - curl -L https://github.com/keybase/client/releases/download/${VERSION}/keybase-${VERSION}.tar.xz -o /tmp/keybase.tar.xz
    - tar -Jxf /tmp/keybase.tar.xz -C "${GOPATH}/src/github.com/keybase/client" --strip-components=1
    - BUILDMODE="-buildmode=pie"
    - cd out
    - go build -v -a -ldflags "-linkmode external -extldflags '-static' -s -w" ${BUILDMODE} -tags production github.com/keybase/client/go/keybase
    - go build -v -a -ldflags "-linkmode external -extldflags '-static' -s -w" ${BUILDMODE} -tags production github.com/keybase/client/go/kbfs/redirector
    - go build -v -a -ldflags "-linkmode external -extldflags '-static' -s -w" ${BUILDMODE} -tags production github.com/keybase/client/go/kbfs/kbfsfuse
    - cd ${CI_PROJECT_DIR}
    - cp Ubuntu/entrypoint out/
    - $(cd out && tar -czf ${CI_PROJECT_DIR}/binaries/keybase-${ARCH}.tar.gz *)
  artifacts:
    paths:
      - binaries
    expire_in: 3 hours

build:ubuntu:amd:
  variables:
    ARCH: "amd64"
  extends: .build:ubuntu
  tags:
    - native-amd64

build:ubuntu:arm:
  variables:
    ARCH: "arm64"
  extends: .build:ubuntu
  tags:
    - native-aarch64

containerize:ubuntu:
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  variables:
    DOCKER_BUILDKIT: 1
  script:
    - VERSION=$(cat binaries/version.txt)
    - TAG_LIST=$(helper "${CI_REGISTRY_IMAGE}" "latest,${VERSION}")
    - TAG_LIST="$(helper "jitesoft/keybase,ghcr.io/jitesoft/keybase" "latest,${VERSION}") ${TAG_LIST}"
    - docker buildx build --platform "linux/amd64,linux/arm64" --build-arg VERSION="${VERSION}" -f Ubuntu/Dockerfile --progress plain --push ${TAG_LIST} .
    - docker pull ${CI_REGISTRY_IMAGE}:latest
    - helper multitag ${CI_REGISTRY_IMAGE}:latest quay.io/jitesoft/keybase:latest quay.io/jitesoft/keybase:${VERSION}
    - helper multipush quay.io/jitesoft/keybase:latest quay.io/jitesoft/keybase:${VERSION}
  tags: [ jitesoft, protected, buildx ]

containerize:alpine:
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  variables:
    DOCKER_BUILDKIT: 1
  script:
    - VERSION=$(cat binaries/version.txt)
    - TAG_LIST=$(helper "${CI_REGISTRY_IMAGE}/alpine" "latest,${VERSION}")
    - TAG_LIST="$(helper "jitesoft/keybase,ghcr.io/jitesoft/keybase" "latest-alpine,${VERSION}-alpine") ${TAG_LIST}"
    - docker buildx build --platform "linux/amd64,linux/arm64" --build-arg VERSION="${VERSION}" -f Alpine/Dockerfile --progress plain --push ${TAG_LIST} .
    - docker pull ${CI_REGISTRY_IMAGE}/alpine:latest
    - helper multitag ${CI_REGISTRY_IMAGE}/alpine:latest quay.io/jitesoft/keybase:alpine-latest quay.io/jitesoft/keybase:alpine-${VERSION}
    - helper multipush quay.io/jitesoft/keybase:alpine-latest quay.io/jitesoft/keybase:alpine-${VERSION}
  tags: [ jitesoft, protected, buildx ]

scan:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:latest"

scan:alpine:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/alpine:latest"

trigger_build:
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  stage: notify
  before_script:
    - apk add --no-cache curl
  script:
    - curl -X POST -F token=${NOTIFY_TOKEN} -F ref=master https://gitlab.com/api/v4/projects/14119338/trigger/pipeline
  only:
    refs:
      - master
